name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  API_ECR_REPOSITORY: regitrack-api
  NGINX_ECR_REPOSITORY: regitrack-nginx
  ECS_CLUSTER_NAME: regitrack-cluster
  API_ECS_SERVICE: regitrack-api-service
  NGINX_ECS_SERVICE: regitrack-nginx-service

jobs:
  # --- CI Job ---
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --force

      - name: Run linter
        run: pnpm lint

      - name: Run production build
        run: pnpm docker:prod:build

  # --- CD Job ---
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build-and-test
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push API image
        id: build-api-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG -f apps/api/Dockerfile.prod .
          docker push $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Nginx image
        id: build-nginx-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG -f nginx/Dockerfile .
          docker push $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Render API task definition
        id: render-api-task
        run: |
          sed -e "s|<IMAGE_URI>|${{ steps.build-api-image.outputs.image }}|g" \
              -e "s|\${ECS_TASK_EXECUTION_ROLE_ARN}|${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }}|g" \
              terraform/api-task-definition.json > task-definition-api.json
          echo "task_definition_path=$(pwd)/task-definition-api.json" >> $GITHUB_OUTPUT

      - name: Render Nginx task definition
        id: render-nginx-task
        run: |
          sed -e "s|<IMAGE_URI>|${{ steps.build-nginx-image.outputs.image }}|g" \
              -e "s|\${ECS_TASK_EXECUTION_ROLE_ARN}|${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }}|g" \
              terraform/nginx-task-definition.json > task-definition-nginx.json
          echo "task_definition_path=$(pwd)/task-definition-nginx.json" >> $GITHUB_OUTPUT

      - name: Deploy API Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-task.outputs.task_definition_path }}
          service: ${{ env.API_ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: false

      - name: Deploy Nginx Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-nginx-task.outputs.task_definition_path }}
          service: ${{ env.NGINX_ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

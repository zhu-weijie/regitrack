name: Continuous Deployment

# Trigger only on pushes to the main branch
on:
  push:
    branches: [ "main" ]

# Define environment variables for clarity
env:
  AWS_REGION: us-east-1
  API_ECR_REPOSITORY: regitrack-api
  NGINX_ECR_REPOSITORY: regitrack-nginx
  ECS_CLUSTER_NAME: regitrack-cluster
  API_ECS_SERVICE: regitrack-api-service
  NGINX_ECS_SERVICE: regitrack-nginx-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    # This job depends on the successful completion of the CI job
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Build, tag, and push API image to ECR
      - name: Build and push API image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG -f apps/api/Dockerfile.prod .
          docker push $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG

      # 5. Build, tag, and push Nginx image to ECR
      - name: Build and push Nginx image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG -f nginx/Dockerfile .
          docker push $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG

      # 6. Update ECS services to force a new deployment
      - name: Update ECS services
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $API_ECS_SERVICE --force-new-deployment
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $NGINX_ECS_SERVICE --force-new-deployment
